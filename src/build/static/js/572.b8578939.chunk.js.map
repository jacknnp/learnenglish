{"version":3,"file":"static/js/572.b8578939.chunk.js","mappings":"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","sources":["apis/commonApi.js","components/DynoDictionary/SettingWordPack.js","components/DynoDictionary/index.js","components/DynoDictionary/data.js","pages/DynoDictionary.js"],"sourcesContent":["import axiosClient from './axiosClient';\n\nconst URL = '/common';\n\nconst commonApi = {\n  getWordPackTotal: (packInfo) => {\n    return axiosClient.get(`${URL}/word-pack/total`, {\n      params: { packInfo: JSON.stringify(packInfo) },\n    });\n  },\n};\n\nexport default commonApi;\n","import SettingsIcon from '@material-ui/icons/Settings';\nimport WordPack from 'components/UI/WordPack';\nimport PropTypes from 'prop-types';\nimport React, { useState } from 'react';\n\nfunction DDSettingWordPack({ classNameIcon, onChoose }) {\n  const [openWordPack, setOpenWordPack] = useState(false);\n\n  const onSelect = (v) => {\n    onChoose(v);\n    setOpenWordPack(false);\n  };\n\n  return (\n    <>\n      <SettingsIcon\n        className={classNameIcon}\n        onClick={() => setOpenWordPack(true)}\n      />\n\n      {/* setting modal */}\n      {openWordPack && (\n        <WordPack\n          open={openWordPack}\n          onCancel={() => setOpenWordPack(false)}\n          onChoose={onSelect}\n        />\n      )}\n    </>\n  );\n}\n\nDDSettingWordPack.propTypes = {\n  classNameIcon: PropTypes.string,\n  onChoose: PropTypes.func,\n};\n\nDDSettingWordPack.defaultProps = {\n  onChoose: () => {},\n};\n\nexport default DDSettingWordPack;\n","import LoopIcon from '@material-ui/icons/Loop';\nimport AutoSearchInput from 'components/UI/AutoSearchInput';\nimport InfiniteScroll from 'components/UI/InfiniteScroll';\nimport WordSortModal from 'components/UI/WordSortModal';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport DynoDictionaryItemData from './Item/data';\nimport DDSettingWordPack from './SettingWordPack';\nimport DynoDictionarySkeleton from './Skeleton';\nimport useStyle from './style';\n\nfunction DynoDictionary({\n  list,\n  loading,\n  onLoadData,\n  more,\n  isFirstLoad,\n  onSettingWordPack,\n  onSortTypeChange,\n  onSearchWord,\n  isTOEIC,\n}) {\n  const classes = useStyle();\n\n  return (\n    <div className={`${classes.root} dyno-container`}>\n      {/* title - menu */}\n      <div className=\"flex-center-between\">\n        <h1 className=\"dyno-title\">Từ điển Dynonary</h1>\n        <div>\n          <WordSortModal\n            onSelect={onSortTypeChange}\n            classNameIcon=\"dyno-setting-icon mr-5\"\n          />\n          {!isTOEIC && (\n            <DDSettingWordPack\n              onChoose={onSettingWordPack}\n              classNameIcon=\"dyno-setting-icon\"\n            />\n          )}\n        </div>\n      </div>\n      <div className=\"dyno-break\"></div>\n\n      {/* list content */}\n      <div className={classes.contentWrap}>\n        <AutoSearchInput disabled={loading} onSearch={onSearchWord} />\n\n        <div className={`${classes.listWrap} w-100`}>\n          <ul id=\"dictionaryId\" className={`${classes.list} flex-col w-100`}>\n            <>\n              {isFirstLoad ? (\n                <DynoDictionarySkeleton className={classes.skeleton} />\n              ) : (\n                <>\n                  {list && list.length > 0 ? (\n                    <>\n                      {/* render list */}\n                      {list.map((item, index) => (\n                        <li className={classes.listItem} key={index}>\n                          <DynoDictionaryItemData {...item} />\n                        </li>\n                      ))}\n\n                      {/* infinite scrolling */}\n                      {!loading && more && (\n                        <InfiniteScroll\n                          onTouchAnchor={onLoadData}\n                          threshold={1}>\n                          <div className=\"w-100 t-center\">\n                            <LoopIcon className=\"ani-spin\" />\n                          </div>\n                        </InfiniteScroll>\n                      )}\n                    </>\n                  ) : (\n                    // empty list\n                    <h3 className=\"notfound-title h-100 flex-center t-center\">\n                      Không tìm thấy từ nào trong từ điển\n                    </h3>\n                  )}\n                </>\n              )}\n            </>\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nDynoDictionary.propTypes = {\n  isFirstLoad: PropTypes.bool,\n  isTOEIC: PropTypes.bool,\n  list: PropTypes.array,\n  loading: PropTypes.bool,\n  more: PropTypes.bool,\n  onLoadData: PropTypes.func,\n  onSearchWord: PropTypes.func,\n  onSettingWordPack: PropTypes.func,\n  onSortTypeChange: PropTypes.func,\n};\n\nDynoDictionary.defaultProps = {\n  list: [],\n  loading: false,\n  more: true,\n  isFirstLoad: true,\n  isTOEIC: false,\n  onLoadData: function () {},\n  onSearchWord: function () {},\n  onSettingWordPack: function () {},\n  onSortTypeChange: function () {},\n};\n\nexport default DynoDictionary;\n","import commonApi from 'apis/commonApi';\nimport wordApi from 'apis/wordApi';\nimport WordDetailModal from 'components/UI/WordDetailModal';\nimport { TOEIC_KEY } from 'constant/topics';\nimport { equalArray } from 'helper';\nimport PropTypes from 'prop-types';\nimport React, { useEffect, useRef, useState } from 'react';\nimport DynoDictionary from '.';\n\nconst perPage = 20;\n\nfunction DynoDictionaryData({ isTOEIC }) {\n  const [page, setPage] = useState(1);\n  const [sortType, setSortType] = useState('rand');\n  const [packInfo, setPackInfo] = useState(() => ({\n    type: '-1',\n    level: '-1',\n    specialty: '-1',\n    topics: isTOEIC ? [TOEIC_KEY] : [],\n  }));\n  const [loading, setLoading] = useState(true);\n  const [list, setList] = useState([]);\n  const [more, setMore] = useState(true); // toggle infinite scrolling\n  const [isFirstLoad, setIsFirstLoad] = useState(true);\n  const totalPage = useRef(0);\n  const preSearchList = useRef([]);\n\n  const nextPage = () => {\n    if (page < totalPage.current) {\n      setPage(page + 1);\n    } else {\n      setMore(false);\n    }\n  };\n\n  const settingWordPack = (info) => {\n    // check old pack vs new pack\n    let isEqual = true;\n    for (let k in packInfo) {\n      if (k !== 'topics' && packInfo[k] !== info[k]) {\n        isEqual = false;\n        break;\n      }\n    }\n    if (isEqual) isEqual = equalArray(packInfo.topics, info.topics);\n\n    totalPage.current = 0;\n    preSearchList.current = [];\n    setMore(true);\n    setList([]);\n    setPackInfo(info);\n    setPage(1);\n  };\n\n  const onSortTypeChange = (type = 'rand') => {\n    if (type === sortType) return;\n    preSearchList.current = [];\n    setSortType(type);\n    setPage(1);\n    setList([]);\n  };\n\n  const onSearchWord = async (word) => {\n    try {\n      if (word === '') {\n        setList(preSearchList.current);\n        setMore(true);\n        return;\n      }\n\n      const apiRes = await wordApi.getSearchWord(word);\n      if (apiRes.status === 200) {\n        const { packList = [] } = apiRes.data;\n        setList(packList);\n        setMore(false);\n      }\n    } catch (error) {}\n  };\n\n  // get total word pack\n  useEffect(() => {\n    let isSub = true;\n\n    (async function () {\n      try {\n        const apiRes = await commonApi.getWordPackTotal(packInfo);\n        if (apiRes.status === 200 && isSub) {\n          const { total = 0 } = apiRes.data;\n          totalPage.current = Math.ceil(total / perPage);\n        }\n      } catch (error) {}\n    })();\n\n    return () => (isSub = false);\n  }, [packInfo]);\n\n  // get word pack\n  useEffect(() => {\n    let isSub = true;\n\n    (async function () {\n      try {\n        setLoading(true);\n        const apiRes = await wordApi.getWordList(\n          page,\n          perPage,\n          packInfo,\n          sortType,\n        );\n        if (apiRes.status === 200 && isSub) {\n          const { packList = [] } = apiRes.data;\n          const newList = [...list, ...packList];\n          preSearchList.current = newList;\n          setList(newList);\n        }\n      } catch (error) {\n      } finally {\n        if (isSub) {\n          setLoading(false);\n          isFirstLoad && setIsFirstLoad(false);\n        }\n      }\n    })();\n\n    return () => (isSub = false);\n  }, [page, packInfo, sortType]);\n\n  return (\n    <>\n      <DynoDictionary\n        isTOEIC={isTOEIC}\n        list={list}\n        loading={loading}\n        onLoadData={nextPage}\n        more={more}\n        isFirstLoad={isFirstLoad}\n        onSettingWordPack={settingWordPack}\n        onSortTypeChange={onSortTypeChange}\n        onSearchWord={onSearchWord}\n      />\n      <WordDetailModal />\n    </>\n  );\n}\n\nDynoDictionaryData.propTypes = {\n  isTOEIC: PropTypes.bool,\n};\n\nDynoDictionaryData.defaultProps = {\n  isTOEIC: false,\n};\n\nexport default DynoDictionaryData;\n","import DynoDictionaryData from 'components/DynoDictionary/data';\nimport useCloseNavigation from 'hooks/useCloseNavigation';\nimport useTitle from 'hooks/useTitle';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nfunction DynoDictionaryPage({ isTOEIC }) {\n  useTitle(isTOEIC ? 'Từ vựng TOEIC' : 'Từ điển');\n  useCloseNavigation();\n\n  return (\n    <div className=\"container\">\n      <DynoDictionaryData isTOEIC={isTOEIC} />\n    </div>\n  );\n}\n\nDynoDictionaryPage.propTypes = {\n  isTOEIC: PropTypes.bool,\n};\n\nDynoDictionaryPage.defaultProps = {\n  isTOEIC: false,\n};\n\nexport default DynoDictionaryPage;\n"],"names":["commonApi","getWordPackTotal","packInfo","axiosClient","params","JSON","stringify","DDSettingWordPack","classNameIcon","onChoose","useState","openWordPack","setOpenWordPack","Settings","className","onClick","WordPack","open","onCancel","v","defaultProps","DynoDictionary","list","loading","onLoadData","more","isFirstLoad","onSettingWordPack","onSortTypeChange","onSearchWord","isTOEIC","classes","useStyle","root","WordSortModal","onSelect","contentWrap","AutoSearchInput","disabled","onSearch","listWrap","id","skeleton","length","map","item","index","listItem","InfiniteScroll","onTouchAnchor","threshold","Loop","DynoDictionaryData","page","setPage","sortType","setSortType","type","level","specialty","topics","TOEIC_KEY","setPackInfo","setLoading","setList","setMore","setIsFirstLoad","totalPage","useRef","preSearchList","word","current","wordApi","apiRes","status","data","packList","useEffect","isSub","total","Math","ceil","newList","info","isEqual","k","equalArray","WordDetailModal","DynoDictionaryPage","useTitle","useCloseNavigation"],"sourceRoot":""}